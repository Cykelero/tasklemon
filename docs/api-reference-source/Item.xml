<Class id="Item" public="true">
	<metadata>
		<name>Item</name>
		<short-description>Describes an item on the file system</short-description>
		<discussion>
		<![CDATA[
			<code>Item</code> objects represent a file or a folder on the file system, whether it exists or not, based on its path.<br>
			<div class="df-list-with-title">
				To get or create <code>Item</code> objects, you can:
				<ul>
					<li>
						use one of the <code><df-class>root</df-class>/<df-class>home</df-class>/<df-class>here</df-class></code> globals
					</li>
					<li>
						call <df-link target="Folder#file"><code>file()</code></df-link> or <df-link target="Folder#folder"><code>folder()</code></df-link> on a <df-class>Folder</df-class>
					</li>
					<li>
						ask the user through a <df-class>cli</df-class> method, using a corresponding <df-link target="TypeDefinition">type definition</df-link>
					</li>
				</ul>
			</div>
		]]>
		</discussion>
		<related>
		<![CDATA[
			There are two kinds of <code>Item</code>:
			<ul>
				<li><df-class>File</df-class></li>
				<li><df-class>Folder</df-class></li>
			</ul>
		]]>
		</related>
	</metadata>
	<exports>
		<export id="existence">
			<property name="exists">
				<type>Boolean</type>
				<short-description>Whether or not the {df:commonName} exists</short-description>
				<read-only/>
				<discussion>
				<![CDATA[
					Whether or not the {df:commonName} exists on disk.<br>
					If there is an item of the same name which isn't a {df:commonName}, returns <code>false</code>.
				]]>
				</discussion>
				<sample name="Check if a file exists">
				<![CDATA[
let newFile = here.file('new-file.txt');

cli.tell(newFile.exists); // `false`

newFile.make();
cli.tell(newFile.exists); // now `true`
				]]>
				</sample>
			</property>
			<method name="make">
				<signature>[Boolean forgiving]</signature>
				<argument name="forgiving" type="Boolean" default="false">
					<![CDATA[
						If true:
						<ul>
							<li>If the parent doesn't exist, <code>make()</code> doesn't throw and creates the parent folder and any missing parent folder.</li>
							<li>If there is already an item of the same name, only throws if the item is not a {df:commonName}. If it is a {df:commonName}, does not modify it.</li>
						</ul>
					]]>
				</argument>
				<returns>self</returns>
				<short-description>Creates the {df:commonName}</short-description>
				<discussion>
				<![CDATA[
					Creates the {df:commonName} based on its <df-link target="#path"><code>path</code></df-link>.<br>
					Throws if the parent doesn't exist, or if there is already an item at that path.
				]]>
				</discussion>
				<sample name="Create a file">
				<![CDATA[
let newFile = here.file('new-file.txt');
newFile.make();

cli.tell(newFile.exists); // now `true`
				]]>
				</sample>
				<sample name="Create a file and its parents">
				<![CDATA[
let packageFolder = here.folder('new-package/');
let packageMetadata = here.file('new-package/package.json');

cli.tell(packageFolder.exists); // `false`
cli.tell(packageMetadata.exists); // `false`

packageMetadata.make(true);

cli.tell(packageFolder.exists); // `true`
cli.tell(packageMetadata.exists); // `true`
				]]>
				</sample>
			</method>
			<method name="copyTo">
				<signature>Folder destination, [Boolean forgiving]</signature>
				<argument name="destination" type="Folder">The folder in which to create the copy.</argument>
				<argument name="forgiving" type="Boolean" default="false">
					<![CDATA[
					If true, if <df-arg>destination</df-arg> doesn't exist, <code>copyTo()</code> doesn't throw and creates <df-arg>destination</df-arg> and any missing parent folder.
					]]>
				</argument>
				<returns>{df:$classname}</returns>
				<short-description>Copies the {df:commonName} to a folder</short-description>
				<discussion>
				<![CDATA[
					Copies the {df:commonName} into the <df-arg>destination</df-arg> folder, and returns a <code>{df:$classname}</code> object representing the copy.<br>
					Throws if there already exists an item of the same name at the destination, or if the destination doesn't exist.
				]]>
				</discussion>
				<sample name="Copy a file and give the copy a new name">
				<![CDATA[
const playerSheetTemplate = here.file('templates/player-sheet.template.md');

let newPlayerSheet = playerSheetTemplate.copyTo(here);
newPlayerSheet.name = 'player-sheet.md';
				]]>
				</sample>
			</method>
			<method name="duplicate">
				<signature>[String newName]</signature>
				<argument name="newName" type="String">The name to use for the copy instead of an automatically-picked one. <code>duplicate()</code> will throw if the name is taken.</argument>
				<returns>{df:$classname}</returns>
				<short-description>Duplicates the {df:commonName} in place.</short-description>
				<discussion>
				<![CDATA[
					Creates a copy of the {df:commonName} in the same folder, and returns a <code>{df:$classname}</code> object representing the copy. The name of the copy is derived from the {df:commonName}'s name.
				]]>
				</discussion>
				<sample name="Duplicate a file then move the copy somewhere else">
				<![CDATA[
const playerSheetTemplate = here.file('templates/player-sheet.template.md');

let newPlayerSheet = playerSheetTemplate.duplicate('player-sheet.md');
newPlayerSheet.moveTo(here);
				]]>
				</sample>
			</method>
			<method name="delete">
				<signature>[Boolean immediately]</signature>
				<argument name="immediately" type="Boolean" default="false">If true, the {df:commonName} is deleted right away instead of being placed in the trash.</argument>
				<returns>self</returns>
				<short-description>Deletes the {df:commonName}</short-description>
				<discussion>
				<![CDATA[
					Deletes the {df:commonName} by moving it to the user's trash.<br>
					Relies on the <a href="https://www.npmjs.com/package/trash">trash</a> package.
				]]>
				</discussion>
				<sample name="Clean up after an operation">
				<![CDATA[
const keepLog = await cli.ask('Keep log file?', Boolean);
if (!keepLog) here.file('events.log').delete();
				]]>
				</sample>
			</method>
			<method name="equals">
				<signature>Item other</signature>
				<argument name="other" type="Item">The item to compare with.</argument>
				<returns>Boolean</returns>
				<short-description>Compares the item with another</short-description>
				<discussion>
				<![CDATA[
					Returns true if <df-arg>item</df-arg> is the same (is also a {df:commonName}, and has the same path).
				]]>
				</discussion>
				<sample name="Ask for two different folders">
				<![CDATA[
const sourceFolder = await cli.ask('From?', Folder);
const destinationFolder = await cli.ask('To?', [Folder, function(value) {
		if (value.equals(sourceFolder)) {
			throw 'is the same as the source';
		}
		return value;
	}
]);

cli.tell('Will copy from: ' + sourceFolder.name);
cli.tell('Will copy to: ' + destinationFolder.name);
				]]>
				</sample>
			</method>
		</export>
		<export id="path">
			<property name="name">
				<type>String</type>
				<short-description>The complete name of the {df:commonName}</short-description>
				<discussion>
				<![CDATA[
					The complete name of the {df:commonName}, including its extension.
				]]>
				</discussion>
				<sample name="Display the name of the first found log file">
				<![CDATA[
const someLog = logFolder.children[0];
cli.tell(someLog.name); // "events.log"
				]]>
				</sample>
			</property>
			<property name="bareName">
				<type>String</type>
				<short-description>The name of the {df:commonName} without the extension</short-description>
				<discussion>
				<![CDATA[
					The name of the {df:commonName}, without the extension.
				]]>
				</discussion>
				<sample name="Get the bareName of a file">
				<![CDATA[
const readme = here.file('README.md');
cli.tell(readme.bareName); // "README"

const minifiedMomentFile = here.file('moment.min.js');
cli.tell(minifiedMomentFile.bareName); // "moment.min"
				]]>
				</sample>
				<sample name="Set the bareName of a file">
				<![CDATA[
const readme = here.file('README.md');
readme.bareName = 'First steps';
cli.tell(readme.name); // "First steps.md"
				]]>
				</sample>
			</property>
			<property name="extension">
				<type>String</type>
				<short-description>The extension of the {df:commonName}</short-description>
				<discussion>
				<![CDATA[
					The extension of the {df:commonName}, such as <code>"txt"</code>.
				]]>
				</discussion>
			</property>
			<property name="path">
				<type>String</type>
				<short-description>The complete path to the {df:commonName}</short-description>
				<discussion>
				<![CDATA[
					The absolute path to the {df:commonName}, including its name.
				]]>
				</discussion>
				<sample name="Read the path of a folder">
				<![CDATA[
cli.tell(home.path); // something like "/Users/cykelero/"
				]]>
				</sample>
			</property>
			<property name="parent">
				<type>Folder</type>
				<short-description>The parent item of the {df:commonName}</short-description>
				<discussion>
				<![CDATA[
					The parent <df-class>Folder</df-class> of the {df:commonName}.<br>
					Is <code>null</code> if the item is a file system root.
				]]>
				</discussion>
				<sample name="Get the parent of the user folder">
				<![CDATA[
const userFolderParent = home.parent;
cli.tell(userFolderParent.path);
				]]>
				</sample>
			</property>
			<method name="moveTo">
				<signature>Folder destination, [Boolean forgiving]</signature>
				<argument name="destination" type="Folder">The new parent folder.</argument>
				<argument name="forgiving" type="Boolean" default="false">
					<![CDATA[
					If true, if <df-arg>destination</df-arg> doesn't exist, <code>moveTo()</code> doesn't throw and creates <df-arg>destination</df-arg> and any missing parent folder.
					]]>
				</argument>
				<returns>self</returns>
				<short-description>Moves the {df:commonName} to a different folder</short-description>
				<discussion>
				<![CDATA[
					Moves the {df:commonName} into the <df-arg>destination</df-arg> folder.<br>
					Throws if there already exists an item of the same name at the destination, or if the destination doesn't exist.
				]]>
				</discussion>
				<sample name="Move a file">
				<![CDATA[
const folderA = here.folder('A/');
const folderB = here.folder('B/');
let file = folderA.file('file.txt');

cli.tell(file.parent.name); // "A"

file.moveTo(folderB);
cli.tell(file.parent.name); // "B"
				]]>
				</sample>
			</method>
		</export>
		<export id="metadata">
			<property name="dateCreated">
				<type>Moment</type>
				<short-description>The creation date of the {df:commonName}</short-description>
				<discussion>
				<![CDATA[
					The creation date of the {df:commonName}. Only supported on macOS.
				]]>
				</discussion>
			</property>
			<property name="dateModified">
				<type>Moment</type>
				<short-description>The modification date of the {df:commonName}</short-description>
				<discussion>
				<![CDATA[
					The last modification date of the {df:commonName}.
				]]>
				</discussion>
			</property>
			<property name="user">
				<type>ItemUserPermissions</type>
				<short-description>The user permissions of the {df:commonName}</short-description>
				<read-only/>
				<discussion>
				<![CDATA[
					The <df-class>ItemUserPermissions</df-class> object for the {df:commonName}. Allows reading and modifying the owner of the {df:commonName}, and the owner's permissions to the {df:commonName}.
				]]>
				</discussion>
				<sample name="Make a file user-executable">
				<![CDATA[
const script = here.file('script.js');
script.user.canExecute = true;
				]]>
				</sample>
			</property>
			<property name="group">
				<type>ItemGroupPermissions</type>
				<short-description>The group permissions of the {df:commonName}</short-description>
				<read-only/>
				<discussion>
				<![CDATA[
					The <df-class>ItemGroupPermissions</df-class> object for the {df:commonName}. Allows reading and modifying the owner group of the {df:commonName}, and the group's permissions to the {df:commonName}.
				]]>
				</discussion>
				<sample name="Make a file group-writeable">
				<![CDATA[
const script = here.file('script.js');
script.group.canWrite = true;
				]]>
				</sample>
			</property>
			<property name="other">
				<type>ItemOtherPermissions</type>
				<short-description>The world permissions of the {df:commonName}</short-description>
				<read-only/>
				<discussion>
				<![CDATA[
					The <df-class>ItemOtherPermissions</df-class> object for the {df:commonName}. Allows reading and modifying world permissions to the {df:commonName}.
				]]>
				</discussion>
				<sample name="Make a file world-readable">
				<![CDATA[
const script = here.file('script.js');
script.other.canRead = true;
				]]>
				</sample>
			</property>
		</export>
	</exports>
</Class>
