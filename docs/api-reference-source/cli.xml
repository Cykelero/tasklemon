<Class id="cli" public="true">
	<metadata>
		<name>cli</name>
		<short-description>Allows user interaction through the command line</short-description>
		<discussion>
		<![CDATA[
			The <code>cli</code> object exposes methods for reading command-line arguments, displaying messages to the user, and asking the user for input.
		]]>
		</discussion>
		<related>
		<![CDATA[
			To format values nicely for display, use <df-class>format</df-class> methods.<br>
			User input is validated and cast using <df-link target="TypeDefinition"><code>TypeDefinition</code></df-link> objects.
		]]>
		</related>
	</metadata>
	<members>
		<group name="Reading program arguments">
			<method name="cli.accept">
				<signature>Object definitions</signature>
				<argument name="definitions" type="Object">A map of argument definitions, by value name.</argument>
				<returns></returns>
				<short-description>Defines accepted arguments</short-description>
				<discussion>
				<![CDATA[
					<p>
						Reads and parses program arguments according to <df-arg>definitions</df-arg>, and populates <df-link target="#cli.args"><code>cli.args</code></df-link> with the resulting values.<br>
						For each definition that matches a program argument, the processed value is stored in <code>cli.args</code>, named after the definition's key in <df-arg>definitions</df-arg>.
					</p>
					<div class="df-list-with-title">
						A definition is an <code>Array</code> with the following values:
						<ul>
							<li>Identifier list: A space-separated string of possible names or indices that identify the argument. At least one identifier is required. See below for identifier syntax.</li>
							<li>Type (optional): A <df-link target="TypeDefinition">type definition</df-link> to apply to the argument value. Defaults to <code>String</code>.</li>
							<li>Description (optional): A description of the argument. Currently unused, but will eventually be displayed to the user when requested.</li>
						</ul>
					</div>
					<p>
						The argument value is sourced differently depending on the definition's type.<br>
						If the type is <code>Boolean</code>, the value is set to true if the argument is present, and otherwise to false.<br>
						If the type is other than <code>Boolean</code>, the next program argument is consumed as a value.
					</p>
					<div class="df-list-with-title">
						An argument identifier can be:
						<dl>
							<dt>Named</dt>
							<dd>
								Two dashes followed by a string, such as <code>--name</code>.<br>
								Matches an argument if it is exactly the identifier string.
							</dd>
						
							<dt>Shorthand</dt>
							<dd>
								One dash followed by a letter, such as <code>-n</code>.<br>
								Matches an argument if it is exactly identifier string, or if it is part of a dash-prefixed group, such as <code>-vn</code>.
							</dd>
						
							<dt>Positional</dt>
							<dd>
								A hash sign followed by a zero-indexed position P, such as <code>#0</code>.<br>
								Matches an argument that doesn't already match named or shorthand identifiers, if it is the Pth such one.
							</dd>
						
							<dt>Rest</dt>
							<dd>
								The string <code>#+</code>.<br>
								Matches all arguments that didn't match any other identifier, collected in an array.
							</dd>
						</dl>
					</div>
					<p>
						If there is no definition using a rest identifier, the rest values are implicitely collected in a value named <code>rest</code>.
					</p>
				]]>
				</discussion>
				<sample name="Named argument and shorthand argument">
				<![CDATA[
// $ lemon adduser.js -a --name Rose

cli.accept({
	username: ['--name', String, 'Name of user to add'],
	isAdmin: ['-a', Boolean, 'Make user an admin']
});

return cli.args; // {username: 'Rose', isAdmin: true}
				]]>
				</sample>
				<sample name="Positional arguments">
				<![CDATA[
// $ lemon transpile.js -x app.ts build.js

cli.accept({
	sourcePath: ['#0', File, 'Source file'],
	destinationPath: ['#1', File, 'Where to write the transpiled file'],
	overrideExisting: ['-x', Boolean, 'Silently override the destination']
});

return cli.args; // {sourcePath: File('app.ts'), destinationPath: File('build.js'), overrideExisting: true}
				]]>
				</sample>
				<sample name="Rest argument and multiple identifiers">
				<![CDATA[
// $ lemon check.js -v --strict catfacts.txt dogfacts.txt

cli.accept({
	paths: ['#+', File, 'Files to check for errors'],
	verbose: ['-v --verbose', Boolean, 'Shows all errors'],
	strictMode: ['-s --strict', Boolean, 'Enable strict checks']
});

return cli.args; // {paths: [File('catfacts.txt'), File('dogfacts.txt')], verbose: true, strictMode: true}
				]]>
				</sample>
			</method>
			<property name="cli.args">
				<type>Object</type>
				<short-description>Holds program arguments</short-description>
				<read-only/>
				<discussion>
				<![CDATA[
					Holds the processed program arguments. See <df-link target="#cli.accept"><code>cli.accept()</code></df-link>.
				]]>
				</discussion>
			</property>
		</group>
		<group name="Displaying messages">
			<method name="cli.tell">
				<signature>String text</signature>
				<argument name="text" type="String">The text to display.</argument>
				<returns></returns>
				<short-description>Displays text to the user</short-description>
				<discussion>
				<![CDATA[
					Displays <df-arg>text</df-arg> to the user by outputting it to <code>stdout</code>.
				]]>
				</discussion>
				<sample name="Say hi">
				<![CDATA[
cli.tell('Hello there!'); // displays “Hello there!”
				]]>
				</sample>
			</method>
			<method name="cli.tellWhile">
				<signature>String text, Promise asyncOperation</signature>
				<argument name="text" type="String">The text to display while awaiting.</argument>
				<argument name="asyncOperation" type="Promise">
				<![CDATA[
					The <code>Promise</code> to wait for.
				]]>
			</argument>
				<returns>Promise&lt;Any&gt;</returns>
				<short-description>Displays text until a Promise resolves</short-description>
				<discussion>
				<![CDATA[
					Displays <df-arg>text</df-arg> to the user by outputting it to <code>stdout</code>, then erases it once <df-arg>asyncOperation</df-arg> resolves.<br>
					Returns the resolved value of <df-arg>asyncOperation</df-arg> as a <code>Promise</code>.
				]]>
				</discussion>
				<sample name="Wait for a network request to complete">
				<![CDATA[
const versionData = await cli.tellWhile(
	'Loading version data...',
	net.getJSON('http://example.org/versions.json')
);

cli.tell(`Latest version is ${versionData.latest}.`);
				]]>
				</sample>
			</method>
		</group>
		<group name="Asking for input">
			<method name="cli.ask">
				<signature>String promptText, [TypeDefinition type = String, [Boolean optional = false]]</signature>
				<argument name="promptText" type="String">The prompt to display.</argument>
				<argument name="type" type="TypeDefinition" default="String">
				<![CDATA[
					The <df-link target="TypeDefinition">type definition</df-link> to apply to the entered value.
				]]>
				</argument>
				<argument name="optional" type="Boolean" default="false">
				<![CDATA[
					If <code>true</code>, allows the user to enter an empty string, which will result in the value being <code>null</code>.
				]]>
				</argument>
				<returns>Promise&lt;Any&gt;</returns>
				<short-description>Asks the user for a value</short-description>
				<discussion>
				<![CDATA[
					Displays <df-arg>promptText</df-arg> to the user then waits for input.<br>
					Once a value is entered, it is cast and validated with <df-arg>type</df-arg>. If the value is valid, the method returns it as a <code>Promise</code>. If the value is invalid, the user is asked again.
				]]>
				</discussion>
				<sample name="Ask for a number">
				<![CDATA[
const balloonCount = await cli.ask('How many balloons do you want?', Number);
cli.tell(`Number of balloons requested: ${balloonCount}`);
				]]>
				</sample>
			</method>
			<method name="cli.askMany">
				<signature>Object definitions</signature>
				<argument name="definitions" type="Object">
				<![CDATA[
					A map of argument arrays for <code>ask()</code>, by value name.
				]]>
			</argument>
				<returns>Promise&lt;Object&gt;</returns>
				<short-description>Asks the user for multiple values</short-description>
				<discussion>
				<![CDATA[
					Calls <df-link target="#cli.ask"><code>cli.ask()</code></df-link> for each item in <df-arg>definitions</df-arg>, using the item's values for arguments.<br>
					Returns a map of all the entered values as a <code>Promise</code>.
				]]>
				</discussion>
				<sample name="Ask for two values">
				<![CDATA[
const responses = await cli.askMany({
	flavor: ['What flavor should the cake be?', String],
	deliveryDate: ['When should it be delivered?', moment]
});

const formattedDeliveryDate = format.date(responses.deliveryDate, true);
cli.tell(`Your ${responses.flavor} cake will be delivered ${formattedDeliveryDate}.`);
				]]>
				</sample>
			</method>
		</group>
	</members>
</Class>
